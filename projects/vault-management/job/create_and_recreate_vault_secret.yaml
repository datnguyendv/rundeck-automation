- defaultTab: nodes
  description: Create or Recreate vault secret
  executionEnabled: true
  group: job
  multipleExecutions: true
  loglevel: INFO
  name: Create And Recreate Vault Secret
  nodeFilterEditable: false
  options:
    - name: VaultName
      description: ""
      label: Vault Name
      required: true
    - name: namespace
      description: ""
      label: Namespace
      value: default
      required: true
    - name: Action
      description: ""
      label: Action
      value: create
      required: true
      enforced: true
      values:
        - create
        - recreate
      valuesListDelimiter: ","
    - name: VaultKey
      description: |-
        - Vault Keys **MUST** be written in **UPPERCASE**
        - To add more key please click `New Value +`
        - Format: `KEY: description (optional)`
        - Ex: `REDIS_HOST: Hostname(s) for Redis cluster`
      label: Vault Key
      required: true
      multivalued: true
      multivalueAllSelected: true
      delimiter: ","
      regex: ^([A-Z0-9_]+)(:(.*))?$
    - description: Vault authentication token
      hidden: true
      name: VaultToken
      required: true
      secure: true
      storagePath: keys/project/vault-management/Token
      valueExposed: true
  plugins:
    ExecutionLifecycle: {}
  scheduleEnabled: true
  sequence:
    commands:
      - description: Add vault into UI
        plugins:
          LogFilter:
            - config:
                invalidKeyPattern: \s|\$|\{|\}|\\
                logData: "false"
                name: href
                regex: href:\s*([^"]+)
                replaceFilteredResult: "false"
              type: key-value-data
            - config:
                loglevel: verbose
                matchLoglevel: normal
                quietMatch: "true"
                regex: href:\s*([^"]+)
              type: quiet-output
        autoSecureInput: "false"
        passSecureInput: "false"
        script: |
          export EXEC_LOCATION=$HOME/projects/$RD_JOB_PROJECT
          echo $EXEC_LOCATION
          ls $EXEC_LOCATION
          python3 $EXEC_LOCATION/input-vault-key.py -i $RD_OPTION_VAULTKEY
      - configuration:
          file: /tmp/${RD_JOB_ID}/${RD_JOB_EXECUTIONUUID}/approved
          interval: "60"
          maxtry: "10"
        description: Waiting For Approve
        nodeStep: true
        type: nixy-waitfor-file-exists
      - autoSecureInput: "false"
        description: Finished Output
        passSecureInput: "false"
        script: |-
          export EXEC_LOCATION=$HOME/projects/$RD_JOB_PROJECT
          python3 $EXEC_LOCATION/clean-job.py --job-href @data.href@ --path /tmp/$RD_JOB_ID/$RD_JOB_EXECUTIONUUID
          echo "Job finished successfully."
    keepgoing: false
    strategy: node-first
