- defaultTab: nodes
  description: ""
  executionEnabled: true
  group: job
  loglevel: INFO
  multipleExecutions: true
  name: Create And Modify Vault Secret
  nodeFilterEditable: false
  options:
    - label: Vault Name
      name: VaultName
      required: true
    - label: Namespace
      name: namespace
      required: true
      value: Default
    - enforced: true
      label: Action
      name: Action
      required: true
      value: create
      values:
        - create
        - add
      valuesListDelimiter: ","
    - delimiter: ","
      description: |-
        - Vault Keys **MUST** be written in **UPPERCASE**
        - To add more key please click `New Value +`
        - Format: `KEY: description (optional)`
        - Ex: `REDIS_HOST: Hostname(s) for Redis cluster`
      label: Vault Key
      multivalueAllSelected: true
      multivalued: true
      name: VaultKey
      regex: ^([A-Z0-9_]+)(:(.*))?$
      required: true
  plugins:
    ExecutionLifecycle: {}
  scheduleEnabled: true
  sequence:
    commands:
      - autoSecureInput: "false"
        description: Setting Approve Job
        passSecureInput: "false"
        script: |-
          DATA=""
          SEP=""
          for kv in $(echo "$RD_OPTION_VAULTKEY" | tr ',' '\n'); do
            KEY=$(echo "$kv" | cut -d':' -f1)
            DATA="$DATA$SEP\\\"$KEY\\\":\\\"\$RD_OPTION_${KEY}\\\""
            SEP=","
          done
          DATA="{$DATA}"

          cat >/tmp/approval_job_${RD_JOB_EXECID}.yaml <<EOF
          - defaultTab: nodes
            description: Approval for vault secret change
            executionEnabled: true
            group: approval
            loglevel: INFO
            name: Approval for execution ${RD_JOB_EXECID}
            nodeFilterEditable: true
            options:
              - name: VaultName
                value: "${RD_OPTION_VAULTNAME}"
              - name: namespace
                value: "${RD_OPTION_NAMESPACE}"
              - name: action
                value: "${RD_OPTION_ACTION}"
              - hidden: true
                name: VaultToken
                required: true
                secure: true
                storagePath: keys/project/vaul-v1/Token
                valueExposed: true
          EOF

          for kv in $(echo "$RD_OPTION_VAULTKEY" | tr ',' '\n'); do
            KEY=$(echo "$kv" | cut -d':' -f1)
            DESC=$(echo "$kv" | cut -s -d':' -f2-)
            if [ -z "$DESC" ]; then
              DESC="Enter value for key $KEY"
            fi
            cat >>/tmp/approval_job_${RD_JOB_EXECID}.yaml <<EOF
              - description: "$DESC"
                name: $KEY
                required: true
          EOF
          done

          cat >>/tmp/approval_job_${RD_JOB_EXECID}.yaml <<EOF
            plugins:
              ExecutionLifecycle: {}
            scheduleEnabled: true
            sequence:
              commands:
                - autoSecureInput: 'false'
                  passSecureInput: 'false'
                  script: |
                    VAULT_ADDR="http://vault:8200"
                    VAULT_PATH="gke/\${RD_OPTION_VAULTNAME}"

                    JSON_DATA=$DATA

                    curl -X POST \\
                      -H "X-Vault-Token: \$RD_OPTION_VAULTTOKEN" \\
                      -H "Content-Type: application/json" \\
                      -d "\$JSON_DATA" \\
                      "\$VAULT_ADDR/v1/\$VAULT_PATH"

                    echo "Approved" > /tmp/approved_marker_${RD_JOB_EXECID}
              keepgoing: false
              strategy: node-first
          EOF

          # Import approval job qua Rundeck API
          result=$(curl -s -X POST \
            -H "X-Rundeck-Auth-Token: Vczci5ltVL6coadjTQyemtAmML9lNJLU" \
            -H "Content-Type: application/yaml" \
            --data-binary @/tmp/approval_job_${RD_JOB_EXECID}.yaml \
            "http://localhost:4440/api/54/project/vaul-v1/jobs/import?format=yaml")

          permalink=$(echo "$result" | grep -o '"permalink":"[^"]*"' | head -1 | sed 's/\"permalink\":\"//;s/\"$//')
          APPROVE_JOB_ID=$(echo "$result" | grep -o '"id":"[^"]*"' | head -1 | sed 's/\"id\":\"//;s/\"$//')

          cat >>/tmp/clean_up_${RD_JOB_EXECID}.sh <<EOF
          curl -s -X DELETE "http://localhost:4440/api/54/job/${APPROVE_JOB_ID}" \
            -H "X-Rundeck-Auth-Token: Vczci5ltVL6coadjTQyemtAmML9lNJLU" \
            -H "Accept: application/json"
          EOF

          echo "Approval link: $permalink"
      - configuration:
          file: /tmp/approved_marker_${job.execid}
          interval: "60"
          maxtry: "10"
        description: Waiting For SRE
        nodeStep: true
        type: nixy-waitfor-file-exists
      - autoSecureInput: "false"
        description: Finished Output
        passSecureInput: "false"
        script: |-
          source /tmp/clean_up_${RD_JOB_EXECID}.sh
          rm -f /tmp/approved_marker_${RD_JOB_EXECID}.yaml
          rm -f /tmp/clean_up_${RD_JOB_EXECID}.sh

          echo "Job finished successfully."
    keepgoing: false
    strategy: node-first
